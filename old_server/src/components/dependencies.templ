package components

import (
	"depedency-mapper-server/models"
	"strconv"
)

templ DependenciesTable() {
	@Card("Dependencies") {
		@Table() {
			@TableHeader() {
				@TableRow() {
					@TableHead("Name")
					@TableHead("Connection")
					@TableHead("Status")
				}
				<tbody id="deps" hx-get="/update-dependencies" hx-trigger="load" hx-swap="outerHTML" hx-target="#deps"></tbody>

				/*
@Dependency("Database Server", "192.168.1.1", "TCP", "3306", "Connected", "secondary")
@Dependency("Cache Server", "192.168.1.102", "TCP", "6379", "Connected", "secondary")
@Dependency("Logging Server", "192.168.1.103", "UDP", "514", "Disconnected", "outline")
*/

			}
		}
	}
}

templ Dependencies(deps []models.Dependency) {
	<tbody id="deps" hx-get="/update-dependencies" hx-trigger="every 30s" hx-swap="outerHTML" hx-target="#deps">
		for _, dep := range deps {
			@Dependency(dep.Module, dep.RemoteIp, "UDP", dep.RemotePort, "Connected", "secondary")
		}
	</tbody>
}

templ TableHead(value string) {
	<th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0">
		{ value }
	</th>
}

templ TableHeader() {
	<thead>
		<tr class="[&_tr]:border-b">
			{ children... }
		</tr>
	</thead>
}

templ Table() {
	<div class="relative w-full overflow-auto">
		<table class="w-full caption-bottom text-sm">
			{ children... }
		</table>
	</div>
}

templ TableBody() {
	<tbody class="[&_tr:last-child]:border-0">
		{ children... }
	</tbody>
}

templ TableCell() {
	<td class="p-4 align-middle [&:has([role=checkbox])]:pr-0">
		{ children... }
	</td>
}

templ TableRow() {
	<tr class="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
		{ children... }
	</tr>
}

templ Dependency(name string, ip string, connection string, port int, status string, statusVariant string) {
	@TableRow() {
		@TableCell() {
			<div class="font-medium">{ name }</div>
			<div class="text-sm text-muted-foreground">{ ip }</div>
		}
		@TableCell() {
			<div class="font-medium">{ connection }</div>
			<div class="text-sm text-muted-foreground">{ strconv.Itoa(port) }</div>
		}
		@TableCell() {
			@Badge(status, statusVariant)
		}
	}
}
