// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.747
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func NetworkGraph() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"relative h-screen\"><!-- Hamburger Menu Button --><button id=\"menuToggle\" class=\"fixed top-4 left-4 z-50 p-2 bg-white rounded-md shadow-md\"><i class=\"fas fa-bars text-gray-800\"></i></button><!-- Zoom Controls --><div class=\"fixed top-4 right-4 z-50 flex space-x-2\"><button id=\"zoomIn\" class=\"p-2 bg-white rounded-md shadow-md\"><i class=\"fas fa-plus text-gray-800\"></i></button> <button id=\"zoomOut\" class=\"p-2 bg-white rounded-md shadow-md\"><i class=\"fas fa-minus text-gray-800\"></i></button></div><!-- Sidebar --><div id=\"sidebar\" class=\"fixed top-0 left-0 w-64 h-full bg-white shadow-lg transform -translate-x-full transition-transform duration-300 ease-in-out z-40\"><div class=\"p-4 mt-16\"><h2 class=\"text-xl font-bold mb-4\">Filters</h2><!-- Filter Options --><div class=\"mb-4\"><h3 class=\"font-semibold mb-2\">Node Types</h3><div class=\"space-y-2\"><label class=\"flex items-center\"><input type=\"checkbox\" class=\"form-checkbox\" value=\"type1\"> <span class=\"ml-2\">Type 1</span></label> <label class=\"flex items-center\"><input type=\"checkbox\" class=\"form-checkbox\" value=\"type2\"> <span class=\"ml-2\">Type 2</span></label> <label class=\"flex items-center\"><input type=\"checkbox\" class=\"form-checkbox\" value=\"type3\"> <span class=\"ml-2\">Type 3</span></label></div></div><!-- Regex Filter --><div class=\"mb-4\"><h3 class=\"font-semibold mb-2\">Regex Filter</h3><input type=\"text\" id=\"regexFilter\" class=\"w-full px-2 py-1 border rounded\" placeholder=\"Enter regex...\"></div><!-- Apply Filters Button --><button id=\"applyFilters\" class=\"w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600\">Apply Filters</button></div></div><!-- Graph Container --><div id=\"graph\" class=\"w-full h-full\"></div></div><script src=\"/static/js/tailwind-3.4.5.js\"></script><script src=\"/static/js/htmx.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/js/all.min.js\"></script><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = TailwindConfig().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<style>\n        @import \"/static/css/globals.css\";\n\n        .link { stroke-opacity: 0.6; }\n        .node text { font-size: 10px; }\n        .node circle { stroke: #fff; stroke-width: 2px; }\n        .connection-node { fill: #ffd700; stroke: #ff8c00; stroke-width: 2px; }\n    </style><script src=\"https://d3js.org/d3.v6.min.js\"></script><script>\n        var nodes = [];\n        var connections = [];\n        var links = [];\n\n        var icons = {\n            \"Linux\": \"/static/assets/Linux.svg\",\n            \"Windows\": \"/static/assets/Windows.svg\",\n            \"Unknown\": \"/static/assets/Unknown.svg\",\n        };\n\n        function getNodeIcon(node) {\n            return icons[node.os] || icons[\"Unknown\"];\n        }\n\n        var svg = d3.select('#graph').append('svg');\n        var g = svg.append(\"g\");\n        var width = window.innerWidth;\n        var height = window.innerHeight;\n\n        var zoom = d3.zoom()\n            .scaleExtent([0.1, 4])\n            .on(\"zoom\", (event) => {\n                g.attr(\"transform\", event.transform);\n            });\n\n        svg.call(zoom);\n\n        var linkGroup = g.append('g').attr('class', 'links');\n        var nodeGroup = g.append('g').attr('class', 'nodes');\n        var connectionGroup = g.append('g').attr('class', 'connections');\n        var textGroup = g.append('g').attr('class', 'texts');\n\n        var simulation = d3.forceSimulation()\n            .force('link', d3.forceLink().id(d => d.id).distance(150))\n            .force('charge', d3.forceManyBody().strength(-800))\n            .force('center', d3.forceCenter(width / 2, height / 2))\n            .force('collision', d3.forceCollide().radius(60));\n\n        function handleResize() {\n            width = window.innerWidth;\n            height = window.innerHeight;\n            svg.attr('width', width).attr('height', height);\n            simulation.force('center', d3.forceCenter(width / 2, height / 2));\n            simulation.alpha(1).restart();\n        }\n\n        handleResize();\n        window.addEventListener('resize', handleResize);\n\n        var dragDrop = d3.drag()\n            .on('start', dragstarted)\n            .on('drag', dragged)\n            .on('end', dragended);\n\n        function updateGraph() {\n            var link = linkGroup.selectAll('.link')\n                .data(links)\n                .join('line')\n                .attr('class', 'link')\n                .attr('stroke', '#4A4A4A')\n                .attr('stroke-width', 2)\n                .attr('marker-end', 'url(#arrowhead)');\n\n            var node = nodeGroup.selectAll('.node')\n                .data(nodes)\n                .join('g')\n                .attr('class', 'node')\n                .call(dragDrop);\n\n            node.selectAll('image')\n                .data(d => [d])\n                .join('image')\n                .attr('xlink:href', getNodeIcon)\n                .attr('width', 32)\n                .attr('height', 32)\n                .attr('x', -16)\n                .attr('y', -16);\n\n            node.selectAll('text')\n                .data(d => [d])\n                .join('text')\n                .text(d => d.id)\n                .attr('font-size', 10)\n                .attr('dx', 20)\n                .attr('dy', 4);\n\n            var connection = connectionGroup.selectAll('.connection')\n                .data(connections)\n                .join('g')\n                .attr('class', 'connection')\n                .call(dragDrop);\n\n            connection.selectAll('circle')\n                .data(d => [d])\n                .join('circle')\n                .attr('r', 15)\n                .attr('class', 'connection-node');\n\n            connection.selectAll('text')\n                .data(d => [d])\n                .join('text')\n                .text(d => d.protocol)\n                .attr('font-size', 8)\n                .attr('text-anchor', 'middle')\n                .attr('dy', -20);\n\n            connection.selectAll('.port-text')\n                .data(d => [d])\n                .join('text')\n                .attr('class', 'port-text')\n                .text(d => `${d.sourcePort}->${d.targetPort}`)\n                .attr('font-size', 8)\n                .attr('text-anchor', 'middle')\n                .attr('dy', 20);\n\n            simulation.nodes(nodes.concat(connections)).on('tick', () => {\n                link\n                    .attr('x1', d => d.source.x)\n                    .attr('y1', d => d.source.y)\n                    .attr('x2', d => {\n                        const dx = d.target.x - d.source.x;\n                        const dy = d.target.y - d.source.y;\n                        const distance = Math.sqrt(dx * dx + dy * dy);\n                        const targetRadius = d.target.protocol ? 15 : 16;\n                        return d.target.x - (dx * (targetRadius + 10) / distance);\n                    })\n                    .attr('y2', d => {\n                        const dx = d.target.x - d.source.x;\n                        const dy = d.target.y - d.source.y;\n                        const distance = Math.sqrt(dx * dx + dy * dy);\n                        const targetRadius = d.target.protocol ? 15 : 16;\n                        return d.target.y - (dy * (targetRadius + 10) / distance);\n                    });\n\n                node.attr('transform', d => `translate(${d.x},${d.y})`);\n                connection.attr('transform', d => `translate(${d.x},${d.y})`);\n            });\n\n            simulation.force('link').links(links);\n        }\n\n        function dragstarted(event, d) {\n            if (!event.active) simulation.alphaTarget(0.3).restart();\n            d.fx = d.x;\n            d.fy = d.y;\n        }\n\n        function dragged(event, d) {\n            d.fx = event.x;\n            d.fy = event.y;\n        }\n\n        function dragended(event, d) {\n            if (!event.active) simulation.alphaTarget(0);\n            d.fx = null;\n            d.fy = null;\n        }\n\n        fetch('/api/graph-data')\n            .then(response => response.json())\n            .then(data => {\n                nodes = data.nodes.map(node => ({\n                    id: node.id,\n                    os: node.os,\n                    type: node.type\n                }));\n\n                connections = data.connections.map(conn => ({\n                    id: conn.id,\n                    protocol: conn.protocol,\n                    sourcePort: conn.sourcePort,\n                    targetPort: conn.targetPort,\n                    description: conn.description\n                }));\n\n                links = data.edges.map(edge => ({\n                    source: edge.source,\n                    target: edge.connection,\n                })).concat(data.edges.map(edge => ({\n                    source: edge.connection,\n                    target: edge.target,\n                })));\n\n                updateGraph();\n                simulation.alpha(1).restart();\n            });\n\n        // Toggle sidebar\n        const menuToggle = document.getElementById('menuToggle');\n        const sidebar = document.getElementById('sidebar');\n        menuToggle.addEventListener('click', () => {\n            sidebar.classList.toggle('-translate-x-full');\n        });\n\n        // Zoom controls\n        document.getElementById('zoomIn').addEventListener('click', () => {\n            svg.transition().call(zoom.scaleBy, 1.2);\n        });\n\n        document.getElementById('zoomOut').addEventListener('click', () => {\n            svg.transition().call(zoom.scaleBy, 0.8);\n        });\n\n        // Apply filters\n        document.getElementById('applyFilters').addEventListener('click', () => {\n            const selectedTypes = Array.from(document.querySelectorAll('input[type=\"checkbox\"]:checked')).map(cb => cb.value);\n            const regexFilter = document.getElementById('regexFilter').value;\n\n            let filteredNodes = nodes;\n            \n            if (selectedTypes.length > 0) {\n                filteredNodes = filteredNodes.filter(node => selectedTypes.includes(node.type));\n            }\n\n            if (regexFilter) {\n                const regex = new RegExp(regexFilter);\n                filteredNodes = filteredNodes.filter(node => regex.test(node.id));\n            }\n\n            const filteredLinks = links.filter(link => \n                filteredNodes.some(node => node.id === link.source.id || node.id === link.source) &&\n                filteredNodes.some(node => node.id === link.target.id || node.id === link.target)\n            );\n\n            updateGraph(filteredNodes, filteredLinks);\n        });\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}
