// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.747
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func NetworkGraph() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script src=\"/static/js/tailwind-3.4.5.js\"></script><script src=\"/static/js/htmx.min.js\"></script><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = TailwindConfig().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<style>\n    @import \"/static/css/globals.css\";\n</style><svg width=\"960\" height=\"600\"></svg><script src=\"https://d3js.org/d3.v4.min.js\"></script><script>\n    var nodes = [];\n    var links = [];\n\n    var icons = {\n        \"Linux\": \"/static/assets/Linux.svg\",\n        \"Windows\": \"/static/assets/Windows.svg\",\n        \"Unknown\": \"/static/assets/Unknown.svg\",\n    };\n\n    function getNodeIcon(node) {\n        return icons[node.os] || icons[\"Unknown\"];\n    }\n\n    function getNeighbors(node) {\n        return links.reduce(function (neighbors, link) {\n            if (link.target.id === node.id) {\n                neighbors.push(link.source.id);\n            } else if (link.source.id === node.id) {\n                neighbors.push(link.target.id);\n            }\n            return neighbors;\n        },\n            [node.id]\n        );\n    }\n\n    function isNeighborLink(node, link) {\n        return link.target.id === node.id || link.source.id === node.id;\n    }\n\n    function getLinkColor(node, link) {\n        return isNeighborLink(node, link) ? 'green' : '#E5E5E5';\n    }\n\n    function getTextColor(node, neighbors) {\n        return Array.isArray(neighbors) && neighbors.indexOf(node.id) > -1 ? 'green' : 'black';\n    }\n\n    var width = window.innerWidth;\n    var height = window.innerHeight;\n\n    var svg = d3.select('svg')\n        .attr('width', width)\n        .attr('height', height);\n\n    var linkElements,\n        nodeElements,\n        textElements;\n\n    var linkGroup = svg.append('g').attr('class', 'links');\n    var nodeGroup = svg.append('g').attr('class', 'nodes');\n    var textGroup = svg.append('g').attr('class', 'texts');\n\n    var selectedId;\n\n    var linkForce = d3.forceLink()\n        .id(function (link) {return link.id;})\n        .strength(function (link) {return link.strength;});\n\n    var simulation = d3.forceSimulation()\n        .force('link', d3.forceLink().id(function (d) {return d.id;}).distance(150))\n        .force('charge', d3.forceManyBody().strength(-50))\n        .force('center', d3.forceCenter(width / 2, height / 2))\n        .force('collision', d3.forceCollide().radius(function (d) {\n            return d.label ? (d.label.length * 3) + 15 : 25; // Adjust radius based on label length\n        }).strength(0.7));\n\n    var dragDrop = d3.drag().on('start', function (node) {\n        node.fx = node.x;\n        node.fy = node.y;\n    }).on('drag', function (node) {\n        simulation.alphaTarget(0.7).restart();\n        node.fx = d3.event.x;\n        node.fy = d3.event.y;\n    }).on('end', function (node) {\n        if (!d3.event.active) {\n            simulation.alphaTarget(0);\n        }\n        node.fx = null;\n        node.fy = null;\n    });\n\n    function selectNode(selectedNode) {\n        window.location.href = \"/node/\" + selectedNode.id;\n    }\n\n    function updateData(selectedNode) {\n        var neighbors = getNeighbors(selectedNode);\n        var newNodes = nodes.filter(function (node) {\n            return neighbors.indexOf(node.id) > -1;\n        });\n\n        var diff = {\n            removed: nodes.filter(function (node) {return newNodes.indexOf(node) === -1;}),\n            added: newNodes.filter(function (node) {return nodes.indexOf(node) === -1;})\n        };\n\n        diff.removed.forEach(function (node) {nodes.splice(nodes.indexOf(node), 1);});\n        diff.added.forEach(function (node) {nodes.push(node);});\n\n        links = links.filter(function (link) {\n            return link.target.id === selectedNode.id || link.source.id === selectedNode.id;\n        });\n    }\n\n    function updateGraph() {\n        linkElements = linkGroup.selectAll('line')\n            .data(links, function (link) {\n                return link.target.id + link.source.id;\n            });\n\n        linkElements.exit().remove();\n\n        var linkEnter = linkElements.enter().append('line')\n            .attr('stroke-width', 1)\n            .attr('stroke', 'rgba(50, 50, 50, 0.2)');\n\n        linkElements = linkEnter.merge(linkElements);\n\n\n        nodeElements = nodeGroup.selectAll('image')\n            .data(nodes, function (node) {return node.id;});\n\n        nodeElements.exit().remove();\n\n        var nodeEnter = nodeElements.enter()\n            .append('image')\n            .attr('xlink:href', function (node) {return getNodeIcon(node);})\n            .attr('width', 32)\n            .attr('height', 32)\n            .attr('x', function (node) {return node.x - 16;})\n            .attr('y', function (node) {return node.y - 16;})\n            .call(dragDrop)\n            .on('click', selectNode);\n\n        nodeElements = nodeEnter.merge(nodeElements);\n\n        textElements = textGroup.selectAll('text')\n            .data(nodes, function (node) {return node.id;});\n\n        textElements.exit().remove();\n\n        var textEnter = textElements.enter()\n            .append('text')\n            .text(function (node) {return node.id;})\n            .attr('font-size', 15)\n            .attr('dx', 15)\n            .attr('dy', 4);\n\n        textElements = textEnter.merge(textElements);\n    }\n\n    // Update the positioning of the text labels\n    function updateSimulation() {\n        updateGraph();\n\n        simulation.nodes(nodes).on('tick', () => {\n            nodeElements\n                .attr('x', function (node) {return node.x - 16;})\n                .attr('y', function (node) {return node.y - 16;});\n            textElements\n                .attr('x', function (node) {return node.x + 15;})\n                .attr('y', function (node) {return node.y + 5;});\n            linkElements\n                .attr('x1', function (link) {return link.source.x;})\n                .attr('y1', function (link) {return link.source.y;})\n                .attr('x2', function (link) {return link.target.x;})\n                .attr('y2', function (link) {return link.target.y;});\n        });\n\n        simulation.force('link').links(links);\n        simulation.alphaTarget(0.7).restart();\n    }\n\n    fetch('/api/graph-data')\n        .then(response => response.json())\n        .then(data => {\n            nodes = data.nodes.map(node => ({\n                id: node.id,\n                os: node.os\n            }));\n\n            links = data.edges.map(edge => ({\n                source: edge.source,\n                target: edge.target\n            }));\n\n            updateSimulation();\n        });\n\n</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}
